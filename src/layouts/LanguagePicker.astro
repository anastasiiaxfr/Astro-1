---
import { getRelativeLocaleUrlList } from "astro:i18n";
import { getRelativeLocaleUrl } from "astro:i18n";

import { languages } from "../i18n/ui";

const currentLocale = Astro.currentLocale || "en";
const localeUrls = getRelativeLocaleUrlList();

const localeList = localeUrls.map((url) => {
  const segments = url.split("/").filter(Boolean);
  const lang = segments[0] || currentLocale;
  return { lang, url };
});

///
const getPathWithoutLocale = (path: string): string => {
  const segments = path.split("/").filter(Boolean);
  return segments.slice(1).join("/") || "/";
};

const currentPathWithoutLocale = getPathWithoutLocale(Astro.url.pathname);
const currentLang = Astro.currentLocale || "fr";
---

<div class="dropdown">
  <button class="dropdown-toggle">
    <svg class="icon" width="24" height="24">
      <use xlink:href="#globe"></use>
    </svg>
    {currentLang.toUpperCase()}<svg class="icon" width="16" height="16">
      <use xlink:href="#arr-down"></use>
    </svg>
  </button>

  <nav class="dropdown-menu">
    {
      localeList.map(({ lang }) => (
        <a href={getRelativeLocaleUrl(lang, currentPathWithoutLocale)}>
          {lang.toUpperCase()}
        </a>
      ))
    }
  </nav>
</div>

<script>
  const dropdown = document.querySelector(".dropdown");
  const toggle = dropdown.querySelector(".dropdown-toggle");
  const menu = dropdown.querySelector(".dropdown-menu");

  toggle.addEventListener("click", (e) => {
    e.stopPropagation();
    menu.classList.add("show");
    toggle?.classList.add("active");
  });

  menu.querySelectorAll("a").forEach((link) => {
    link.addEventListener("click", () => {
      menu.classList.remove("show");
    });
  });

  document.addEventListener("click", (e) => {
    if (!dropdown.contains(e.target)) {
      menu.classList.remove("show");
      toggle?.classList.remove("active");
    }
  });
</script>
